services:
  nginx:
    depends_on:
      user:
        condition: service_healthy
      # tournament:
      #   condition: service_healthy
      # static_files:
      #   condition: service_healthy
    container_name: ctn_nginx
    build :
      context: ./nginx/
      args:
        env: prod
    environment:
      - static_files_port=${static_files_port}
      - tournament_port=${tournament_port}
      - match_port=${match_port}
    image: img_nginx
    ports:
      # - "443:443" #https NOT WORKING AT 42!!!
      # - "80:80" #http NOT WORKING AT 42!!!
      - "8443:443"
      - "8000:80"
    volumes:
      - staticvol:/usr/share/nginx/static
    networks:
      - transcendence_network
    restart: on-failure

  tournament:
    container_name: ctn_tournament
    build :
      context: ./tournament/
    environment:
      - env=prod
      - port=${tournament_port}
      - name=tournament
      - pi_domain=${PI_DOMAIN}
    image: img_tournament
    volumes:
      - staticvol:/app/staticfiles
    networks:
      - transcendence_network
    restart: always

  match:
    container_name: ctn_match
    build :
      context: ./match/
    environment:
      - env=prod
      - port=${match_port}
      - name=match
      - pi_domain=${PI_DOMAIN}
      - rasp=${rasp}
    image: img_match
    volumes:
      - staticvol:/app/staticfiles
    networks:
      - transcendence_network
    restart: always 

  static_files:
    container_name: ctn_static_files
    build :
      context: ./static_files/
    environment:
      - env=prod
      - port=${static_files_port}
      - name=static_files
      - pi_domain=${PI_DOMAIN}
    image: img_static_files
    networks:
      - transcendence_network
    volumes:
      - staticvol:/app/staticfiles
    restart: always

  # USERS
  user:
    extends:
      file: ./user/_docker/user_compose.yaml
      service: user

  user_db:
    extends:
      file: ./user/_docker/user_compose.yaml
      service: user_db

  # admin:
  #   container_name: ctn_admin
  #   build :
  #     context: ./admin/
  #   environment:
  #     - env=prod
  #     - name=admin
  #     - port=${admin_port}
  #     - pi_domain=${PI_DOMAIN} # maybe not set up yet
  #   env_file: # ! Maybe delete depending on which postgres data I need
  #     - .env
  #   image: img_admin
  #   networks:
  #     - transcendence_network
  #   volumes:
  #     - staticvol:/app/staticfiles
  #   restart: always

volumes:
  
  # Seb Static files volumes
  staticvol:
    driver: local
  
  user_db_volume:
    # Use the local driver for the volume
    driver: local
    name: user_db_volume
    driver_opts:
      # Specify the type as 'none' to use a bind mount
      type: none
      # When assigned to a container, the posgreSQL will reflect what's in this specified path.
      device: '/home/volumes_transcendence/postgres/user'
      # Bind the specified host path to the volume
      o: bind


networks:
  transcendence_network:
    name: transcendence_network
    driver : bridge