services:
  user:
    depends_on:
      user_db:
        condition: service_healthy
    container_name: ctn_user
    build :
      context: ./
    environment:
      - env=prod
      - name=user
      - port=${user_port}
      - pi_domain=${PI_DOMAIN} # maybe not set up yet
    env_file: # ! Maybe delete depending on which postgres data I need
      - ../.env
    image: img_user
    networks:
      - transcendence_network
    volumes:
      - staticvol:/app/staticfiles
    healthcheck:
      # Health check done in non root user
      test: ["CMD", "curl", "-f", "http://localhost:${user_port}/health/"]
      interval: 1m30s    # How often to run the health check (every 90 seconds)
      timeout: 5s       # Maximum time to wait for the check to complete
      retries: 5         # Number of consecutive failures needed to mark container as unhealthy
      start_period: 30s  # Initial grace period where failures don't count (container startup time)
    restart: always

  user_db:
    image: postgres:latest
    container_name: ctn_user_db
    environment:
      - name=user_db
      - pi_domain=${PI_DOMAIN}
      - port=${POSTGRES_PORT} # really usefull ?
      - POSTGRES_DB=${USER_POSTGRES_DB}
      - POSTGRES_USER=${USER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USER_POSTGRES_PASSWORD}
    env_file:
      - ../.env
    # HOST_PORT:CONTAINER_PORT
    ports:
      - "5433:5432" # TODO : Increment hosts ports for each db container
    healthcheck:
      # Health check done in non root user, toherwise fails
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5ms
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      # Bind mount for db in local
      - user_db_volume:/var/lib/postgresql/data
      # Init script for init db and users
      - ../postgres/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    networks:
      - transcendence_network
    restart: always