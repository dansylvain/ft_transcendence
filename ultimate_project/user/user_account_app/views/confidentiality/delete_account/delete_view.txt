from django.shortcuts import render
from django.template.loader import render_to_string
from django.views.decorators.http import require_http_methods
from django.views.decorators.csrf import ensure_csrf_cookie
from django.http import HttpRequest
#Custom import
from utils import manage_user_data

# === üîç Delete user account üîç ===

async def handle_post_delete(request: HttpRequest, username, context):
    """Handles POST request for verifying 2FA token."""
    form = custom_form.TwoFaForm(request.POST)
    if not username:
        context["error"] = "User not authenticated"
        return render(request, "partials/security/twofa/error_2fa.html", context), True, False
    user = await manage_user_data.get_user_info_w_username(username)
    if not user:
        context["error"] = "We couldn't find a user with the provided information."
        return render(request, "partials/security/twofa/error_2fa.html", context), True, False
    if form.is_valid():
        token = request.POST.get("token")
        secret = user.get("_two_fa_secret")
        if not secret:
            context["error"] = "Two-Factor Authentication secret is missing from your account data."
            return render(request, "partials/security/twofa/error_2fa.html", context), True, False
        totp = pyotp.TOTP(secret)
        if totp.verify(token):
            update_data = {"two_fa_enabled": True}
            update_result = await manage_user_data.update_user_w_user_id(user["id"], update_data)
            if not update_result:
                context["error"] = "Failed to update 2FA settings. Please check your input or try again later."
                return render(request, "partials/security/twofa/error_2fa.html", context), True, False
            context["message"] = "Two-Factor Authentication (2FA) has been successfully verified!"
            return render(request, "partials/security/twofa/success_2fa.html", context), False, True 
        else:
            form.add_error("token", "The token is invalid. Please check and try again.")
    context["form"] = form
    return render(request, "partials/security/twofa/verify_2fa.html", context), False, False

async def handle_get_delete(request, username, context):
    
    try:
        form = custom_form.TwoFaForm()
        context["form"] = form
        # THIS WILL NEED TO BE DELETE BECAUSE NEED A GLOBAL AUTH HANDLER !!!!!!!!!
        if not username:
            context["error"] = "You must be logged in to perform this action. Please log in and try again."
            return render(request, "partials/security/twofa/error_2fa.html", context), True
        # Get user from database API
        user = await manage_user_data.get_user_info_w_username(username)
        if not user:
            context["error"] = "We couldn't find a user with the provided information. Please check your credentials and try again."
            return render(request, "partials/security/twofa/error_2fa.html", context), True
            # Check if 2FA is already verified
        if user.get("two_fa_enabled"):
            context["error"] = "2FA is already enabled for this account. You can disable it before making changes."
            return render(request, "partials/security/twofa/error_2fa.html", context), True
        if request.headers.get("HX-Request"):
                if request.headers.get("X-Inner-Content") == "true":
                    return render(request, "partials/security/twofa/verify_2fa.html", context)
        context["page"] = "partials/security/twofa/verify_2fa.html"
        return render(request, "layouts/account.html", context)
    except Exception as e:
        context["error"] = "Something went wrong during 2FA setup. Please try again later."
        return render(request, "partials/security/twofa/error_2fa.html", context), True
    
# will neeed to modfy this code
@require_http_methods(["GET", "POST"])
@ensure_csrf_cookie
async def delete_account_view(request: HttpRequest):
    """Main view function that routes requests based on method."""
    context = await manage_user_data.build_context(request)
    try:
        if request.method == "POST":
            response, is_error_page, is_success_page = await handle_post_delete(request, context["username"], context)
        elif request.method == "GET":
            response, is_error_page = await handle_get_delete(request, context["username"], context)
            is_success_page = False
        if request.headers.get("HX-Request"):
            if request.headers.get("X-Inner-Content") == "true":
                return (response)
        if is_error_page:
            context["page"] = "partials/security/twofa/error_2fa.html"
        elif is_success_page:
            context["page"] = "partials/security/twofa/success_2fa.html"
        else:
            context["page"] = "partials/security/twofa/verify_2fa.html"        
        return render(request, "layouts/account.html", context)
    except Exception as e:
        print(f"\n‚ùå Exception in verify_2fa_view: {e}\n", flush=True)
        if request.headers.get("HX-Request"):
                if request.headers.get("X-Inner-Content") == "true":
                    return render(request, "partials/security/twofa/error_2fa.html", context)
        context["page"] = "partials/security/twofa/error_2fa.html"
        return render(request, "layouts/account.html", context)




@require_http_methods(["GET", "POST"])
@ensure_csrf_cookie
async def delete_profile(request):

    # Get username from headers
    username = request.headers.get("X-Username")
    if not username:
        return render(
            request,
            "user_management_app/delete-profile.html",
            {"error": "User not authenticated"},
        )

    # Get user data from database API
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"http://databaseapi:8007/api/player/?username={username}"
        )
        # ! Should not happen once the route will be locked
        if response.status_code != 200:
            return render(
                request,"user_management_app/delete-profile.html",
                {"user" : user,
                "error": "User not found"},
            )

        # Checking if the user data is a list or a dictionary
        user_data = response.json()
        if isinstance(user_data, list):
            user = user_data[0]
        elif isinstance(user_data, dict) and "results" in user_data:
            user = user_data["results"][0]
        else:
            return render(request, "user_management_app/delete-profile.html",
                {"user" : user,
                "error": "Invalid user data"},
            )


        if request.method == "GET":
            return render(
                request,
                "user_management_app/delete-profile.html",
                {"user" : user}
            )
        else:
            try:

                # Get form data
                password = request.POST.get("password")
                otp_code = request.POST.get("otp-code")

                if not password:
                    return render(
                        request,
                        "user_management_app/delete-profile.html",
                        {"user" : user,
                        "error": "Password is required"},
                    )

                # Check if 2FA is enabled
                if user.get("two_fa_enabled"):
                    if not otp_code:
                        return render(
                            request,
                            "user_management_app/delete-profile.html",
                            {"user" : user,
                            "error": "2FA code is required"},
                        )

                    # Verify 2FA code
                    secret = user.get("_two_fa_secret")
                    if not secret:
                        return render(
                            request,
                            "user_management_app/delete-profile.html",
                            {"user" : user,
                            "error": "2FA not properly configured"},
                        )

                    totp = pyotp.TOTP(secret)
                    if not totp.verify(otp_code):
                        return render(
                            request,
                            "user_management_app/delete-profile.html",
                            {"user" : user,
                            "error": "Invalid 2FA code"},
                        )

                # AT THIS POINT, 2FA HAS BEEN CHECKED CORRECTLY
                # ! INCORRECT ROUTE
                password_response = await client.post(
                    "http://databaseapi:8007/api/verify-credentials/",
                    data={"username": username, "password": password},
                )

                if password_response.status_code != 200:
                    return render(
                        request,
                        "user_management_app/delete-profile.html",
                        {"user" : user,
                        "error": "Invalid password"},
                    )

                # Delete user
                delete_response = await client.delete(
                    f"http://databaseapi:8007/api/player/{user['id']}/"
                )

                if delete_response.status_code != 204:
                    return render(
                        request,
                        "user_management_app/delete-profile.html",
                        {"user" : user,
                        "error": "Failed to delete user"},
                    )

                # Return success response with redirect URL
                return JsonResponse({"success": True, "redirect_url": "/register/"})

            except Exception as e:
                return JsonResponse({"error": str(e)}, status=500)