services:
  nginx:
    depends_on:
      - tournament
      - static_files
    container_name: ctn_nginx
    build :
      context: ./nginx/
      args:
        env: prod
    environment:
      - static_files_port=${static_files_port}
      - tournament_port=${tournament_port}
      - match_port=${match_port}
    image: img_nginx
    ports:
      # - "443:443" #https NOT WORKING AT 42!!!
      # - "80:80" #http NOT WORKING AT 42!!!
      - "8443:443"
      - "8000:80"
    volumes:
      - staticvol:/usr/share/nginx/static
    networks:
      - transcendence_network
    restart: on-failure

  tournament:
    container_name: ctn_tournament
    build :
      context: ./tournament/
    environment:
      - env=prod
      - port=${tournament_port}
      - name=tournament
      - pi_domain=${PI_DOMAIN}
    image: img_tournament
    volumes:
      - staticvol:/app/staticfiles
    networks:
      - transcendence_network
    restart: always

  match:
    container_name: ctn_match
    build :
      context: ./match/
    environment:
      - env=prod
      - port=${match_port}
      - name=match
      - pi_domain=${PI_DOMAIN}
      - rasp=${rasp}
    image: img_match
    volumes:
      - staticvol:/app/staticfiles
    networks:
      - transcendence_network
    restart: always 

  static_files:
    container_name: ctn_static_files
    build :
      context: ./static_files/
    environment:
      - env=prod
      - port=${static_files_port}
      - name=static_files
      - pi_domain=${PI_DOMAIN}
    image: img_static_files
    networks:
      - transcendence_network
    volumes:
      - staticvol:/app/staticfiles
    restart: always

  user:
    container_name: ctn_user
    build :
      context: ./user/
    environment:
      - env=prod
      - port=${user_port}
      - name=user
      - pi_domain=${PI_DOMAIN}
    image: img_user
    networks:
      - transcendence_network
    volumes:
      - staticvol:/app/staticfiles
    restart: always

  postgres:
    image: postgres:latest
    container_name: ctn_postgres
    environment:
      - name=postgres
      - pi_domain=${PI_DOMAIN}
      - port=${postgres_port}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    # HOST_PORT:CONTAINER_PORT
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - transcendence_network
    restart: always

volumes:
  
  # Seb Static files volumes
  staticvol:
    driver: local
  
  postgres_volume:
    # Use the local driver for the volume
    driver: local
    # Define a name of the volume which serves as identifier for containers
    name: postgres_volume
    driver_opts:
      # Specify the type as 'none' to use a bind mount
      type: none
      # When assigned to a container, the mariadb_volume will reflect what's in this specified path.
      device: '/home/volumes_transcendence/postgres'
      # Bind the specified host path to the volume
      o: bind


networks:
  transcendence_network:
    name: transcendence_network
    driver : bridge
